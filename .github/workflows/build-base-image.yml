name: Build and Push Base Image

on:
  push:
    branches:
      - 'pr*'

jobs:
  check-deps-change:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.set_skip_flag.outputs.should_skip }}  # 输出 should_skip 标志
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # 确保检出完整历史

      - name: Fetch all branches
        run: git fetch --all  # 拉取所有分支

      - name: Check conditions
        id: set_skip_flag
        run: |
          if git diff --name-only dev | grep -E 'poetry.lock|pyproject.toml|Dockerfile-base|package.json|go.mod|yarn.lock|pom.xml|install_deps.sh';then
            echo "Found deps file changes"
          else
            echo "Not found deps file changes, skip build"
            echo "::set-output name=should_skip::true"  # 根据条件设置输出
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-deps-change  # 依赖 check_skip job 的执行结果
    if: needs.check-deps-change.outputs.should_skip != 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract date
        id: vars
        run: echo "IMAGE_TAG=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV

      - name: Extract repository name
        id: repo
        run: echo "REPO=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          file: Dockerfile-base
          tags: jumpserver/core-base:${{ env.IMAGE_TAG }}

      - name: Update Dockerfile
        run: |
          sed -i 's|-base:.* AS stage-build|-base:${{ env.IMAGE_TAG }} AS stage-build|' Dockerfile

      - name: Commit changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add Dockerfile
          git commit -m "perf: Update Dockerfile with new base image tag"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
